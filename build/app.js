(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require=="function"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error("Cannot find module '"+o+"'");throw f.code="MODULE_NOT_FOUND",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require=="function"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){
(function (global){
'use strict';

angular.module('app', ['infinite-scroll']).constant('ENDPOINT_URI', 'http://localhost:8001/api/').controller('MainCtrl', ['$scope', '$http', 'ENDPOINT_URI', function ($scope, $http, ENDPOINT_URI) {

   var vm = this;
   var fullThreadList = [];
   vm.threadList = [];

   vm.addMore = throttle(function () {
      if (fullThreadList.length > 0) {
         var thread = fullThreadList.shift();
         vm.threadList.push(thread);
         console.log('moar.');
      } else {
         console.log('no moar.');
      }
   }, 1000);

   global.MORE = function () {
      vm.addMore();
      $scope.$apply();
   };

   $http.get(ENDPOINT_URI + 'thread').success(function (fullThreadList_) {
      console.log(fullThreadList_.length);
      console.log(fullThreadList_);
      fullThreadList = fullThreadList_;
      vm.addMore();
   }).error(function (err) {
      console.warn(err);
   });

   function throttle(fn, threshhold, scope) {
      if (!threshhold) threshhold = 250;
      var last, deferTimer;
      return function () {
         var context = scope || this;

         var now = +new Date(),
             args = arguments;
         if (last && now < last + threshhold) {
            clearTimeout(deferTimer);
            deferTimer = setTimeout(function () {
               last = now;
               fn.apply(context, args);
            }, threshhold);
         } else {
            last = now;
            fn.apply(context, args);
         }
      };
   }
}]).directive('imgPost', ['$http', 'ENDPOINT_URI', function ($http, ENDPOINT_URI) {

   function link($scope, $elem) {

      $http.post(ENDPOINT_URI + 'post', { thread: $scope.thread }).success(function (data) {
         console.log(data);
         $scope.imgUrlList = data.imgUrlList;
      }).error(function (err) {
         console.warn(err);
      });
   }

   return {

      restrict: 'E',
      replace: true,
      scope: true,
      link: link,
      template: '<div><img ng-repeat="url in imgUrlList" ng-src="{{url}}" width="250px"><br><a href="{{thread}}">{{thread}}</a><br><br></div>'

   };
}]);

}).call(this,typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})

},{}]},{},[1])
//# sourceMappingURL=data:application/json;charset:utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIm5vZGVfbW9kdWxlcy9icm93c2VyaWZ5L25vZGVfbW9kdWxlcy9icm93c2VyLXBhY2svX3ByZWx1ZGUuanMiLCIvVXNlcnMvTklYL0RvY3VtZW50cy9uaXgvdGh6X3NjcmFwZXIvc3JjL2luZGV4LmpzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBOzs7O0FDQUEsT0FBTyxDQUFDLE1BQU0sQ0FBRSxLQUFLLEVBQUUsQ0FDcEIsaUJBQWlCLENBQ25CLENBQUUsQ0FDRixRQUFRLENBQUUsY0FBYyxFQUFFLDRCQUE0QixDQUFFLENBQ3hELFVBQVUsQ0FBRSxVQUFVLEVBQUUsQ0FBRSxRQUFRLEVBQUUsT0FBTyxFQUFFLGNBQWMsRUFBRSxVQUFXLE1BQU0sRUFBRSxLQUFLLEVBQUUsWUFBWSxFQUFJOztBQUVyRyxPQUFJLEVBQUUsR0FBRyxJQUFJLENBQUM7QUFDZCxPQUFJLGNBQWMsR0FBRyxFQUFFLENBQUM7QUFDeEIsS0FBRSxDQUFDLFVBQVUsR0FBRyxFQUFFLENBQUM7O0FBRW5CLEtBQUUsQ0FBQyxPQUFPLEdBQUcsUUFBUSxDQUFFLFlBQVc7QUFDL0IsVUFBSyxjQUFjLENBQUMsTUFBTSxHQUFHLENBQUMsRUFBRztBQUM5QixhQUFJLE1BQU0sR0FBRyxjQUFjLENBQUMsS0FBSyxFQUFFLENBQUM7QUFDcEMsV0FBRSxDQUFDLFVBQVUsQ0FBQyxJQUFJLENBQUUsTUFBTSxDQUFFLENBQUM7QUFDN0IsZ0JBQU8sQ0FBQyxHQUFHLENBQUUsT0FBTyxDQUFFLENBQUM7T0FDekIsTUFBTTtBQUNKLGdCQUFPLENBQUMsR0FBRyxDQUFFLFVBQVUsQ0FBRSxDQUFDO09BQzVCO0lBQ0gsRUFBRSxJQUFJLENBQUUsQ0FBQzs7QUFFVixTQUFNLENBQUMsSUFBSSxHQUFHLFlBQVk7QUFDdkIsUUFBRSxDQUFDLE9BQU8sRUFBRSxDQUFDO0FBQ2IsWUFBTSxDQUFDLE1BQU0sRUFBRSxDQUFDO0lBQ2xCLENBQUM7O0FBRUYsUUFBSyxDQUFDLEdBQUcsQ0FBRSxZQUFZLEdBQUcsUUFBUSxDQUFFLENBQ2hDLE9BQU8sQ0FBRSxVQUFVLGVBQWUsRUFBRztBQUNuQyxhQUFPLENBQUMsR0FBRyxDQUFFLGVBQWUsQ0FBQyxNQUFNLENBQUUsQ0FBQztBQUN0QyxhQUFPLENBQUMsR0FBRyxDQUFFLGVBQWUsQ0FBRSxDQUFDO0FBQy9CLG9CQUFjLEdBQUcsZUFBZSxDQUFDO0FBQ2pDLFFBQUUsQ0FBQyxPQUFPLEVBQUUsQ0FBQztJQUNmLENBQUUsQ0FDRixLQUFLLENBQUUsVUFBVSxHQUFHLEVBQUc7QUFDckIsYUFBTyxDQUFDLElBQUksQ0FBRSxHQUFHLENBQUUsQ0FBQztJQUN0QixDQUFFLENBQUM7O0FBRVAsWUFBUyxRQUFRLENBQUUsRUFBRSxFQUFFLFVBQVUsRUFBRSxLQUFLLEVBQUc7QUFDMUMsVUFBSyxDQUFDLFVBQVUsRUFBRyxVQUFVLEdBQUcsR0FBRyxDQUFDO0FBQ3BDLFVBQUksSUFBSSxFQUNQLFVBQVUsQ0FBQztBQUNaLGFBQU8sWUFBWTtBQUNsQixhQUFJLE9BQU8sR0FBRyxLQUFLLElBQUksSUFBSSxDQUFDOztBQUU1QixhQUFJLEdBQUcsR0FBRyxDQUFDLElBQUksSUFBSSxFQUFBO2FBQ2xCLElBQUksR0FBRyxTQUFTLENBQUM7QUFDbEIsYUFBSyxJQUFJLElBQUksR0FBRyxHQUFHLElBQUksR0FBRyxVQUFVLEVBQUc7QUFDdEMsd0JBQVksQ0FBRSxVQUFVLENBQUUsQ0FBQztBQUMzQixzQkFBVSxHQUFHLFVBQVUsQ0FBRSxZQUFZO0FBQ3BDLG1CQUFJLEdBQUcsR0FBRyxDQUFDO0FBQ1gsaUJBQUUsQ0FBQyxLQUFLLENBQUUsT0FBTyxFQUFFLElBQUksQ0FBRSxDQUFDO2FBQzFCLEVBQUUsVUFBVSxDQUFFLENBQUM7VUFDaEIsTUFBTTtBQUNOLGdCQUFJLEdBQUcsR0FBRyxDQUFDO0FBQ1gsY0FBRSxDQUFDLEtBQUssQ0FBRSxPQUFPLEVBQUUsSUFBSSxDQUFFLENBQUM7VUFDMUI7T0FDRCxDQUFDO0lBQ0Y7Q0FFSCxDQUFFLENBQUUsQ0FDSixTQUFTLENBQUUsU0FBUyxFQUFFLENBQUUsT0FBTyxFQUFFLGNBQWMsRUFBRSxVQUFXLEtBQUssRUFBRSxZQUFZLEVBQUc7O0FBRWhGLFlBQVMsSUFBSSxDQUFFLE1BQU0sRUFBRSxLQUFLLEVBQUc7O0FBRTVCLFdBQUssQ0FBQyxJQUFJLENBQUUsWUFBWSxHQUFHLE1BQU0sRUFBRSxFQUFFLE1BQU0sRUFBRSxNQUFNLENBQUMsTUFBTSxFQUFFLENBQUUsQ0FDMUQsT0FBTyxDQUFFLFVBQVUsSUFBSSxFQUFHO0FBQ3hCLGdCQUFPLENBQUMsR0FBRyxDQUFFLElBQUksQ0FBRSxDQUFDO0FBQ3BCLGVBQU0sQ0FBQyxVQUFVLEdBQUcsSUFBSSxDQUFDLFVBQVUsQ0FBQztPQUN0QyxDQUFFLENBQ0YsS0FBSyxDQUFFLFVBQVUsR0FBRyxFQUFHO0FBQ3JCLGdCQUFPLENBQUMsSUFBSSxDQUFFLEdBQUcsQ0FBRSxDQUFDO09BQ3RCLENBQUUsQ0FBQztJQUVUOztBQUVELFVBQU87O0FBRUosY0FBUSxFQUFFLEdBQUc7QUFDYixhQUFPLEVBQUUsSUFBSTtBQUNiLFdBQUssRUFBRSxJQUFJO0FBQ1gsVUFBSSxFQUFFLElBQUk7QUFDVixjQUFRLEVBQUUsOEhBQThIOztJQUUxSSxDQUFDO0NBRUosQ0FBRSxDQUFFLENBRUoiLCJmaWxlIjoiZ2VuZXJhdGVkLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXNDb250ZW50IjpbIihmdW5jdGlvbiBlKHQsbixyKXtmdW5jdGlvbiBzKG8sdSl7aWYoIW5bb10pe2lmKCF0W29dKXt2YXIgYT10eXBlb2YgcmVxdWlyZT09XCJmdW5jdGlvblwiJiZyZXF1aXJlO2lmKCF1JiZhKXJldHVybiBhKG8sITApO2lmKGkpcmV0dXJuIGkobywhMCk7dmFyIGY9bmV3IEVycm9yKFwiQ2Fubm90IGZpbmQgbW9kdWxlICdcIitvK1wiJ1wiKTt0aHJvdyBmLmNvZGU9XCJNT0RVTEVfTk9UX0ZPVU5EXCIsZn12YXIgbD1uW29dPXtleHBvcnRzOnt9fTt0W29dWzBdLmNhbGwobC5leHBvcnRzLGZ1bmN0aW9uKGUpe3ZhciBuPXRbb11bMV1bZV07cmV0dXJuIHMobj9uOmUpfSxsLGwuZXhwb3J0cyxlLHQsbixyKX1yZXR1cm4gbltvXS5leHBvcnRzfXZhciBpPXR5cGVvZiByZXF1aXJlPT1cImZ1bmN0aW9uXCImJnJlcXVpcmU7Zm9yKHZhciBvPTA7bzxyLmxlbmd0aDtvKyspcyhyW29dKTtyZXR1cm4gc30pIiwiYW5ndWxhci5tb2R1bGUoICdhcHAnLCBbXG4gICAnaW5maW5pdGUtc2Nyb2xsJ1xuXSApXG4uY29uc3RhbnQoICdFTkRQT0lOVF9VUkknLCAnaHR0cDovL2xvY2FsaG9zdDo4MDAxL2FwaS8nIClcbi5jb250cm9sbGVyKCAnTWFpbkN0cmwnLCBbICckc2NvcGUnLCAnJGh0dHAnLCAnRU5EUE9JTlRfVVJJJywgZnVuY3Rpb24gKCAkc2NvcGUsICRodHRwLCBFTkRQT0lOVF9VUkkgKSAge1xuXG4gICB2YXIgdm0gPSB0aGlzO1xuICAgdmFyIGZ1bGxUaHJlYWRMaXN0ID0gW107XG4gICB2bS50aHJlYWRMaXN0ID0gW107XG5cbiAgIHZtLmFkZE1vcmUgPSB0aHJvdHRsZSggZnVuY3Rpb24oKSB7XG4gICAgICBpZiAoIGZ1bGxUaHJlYWRMaXN0Lmxlbmd0aCA+IDAgKSB7XG4gICAgICAgICB2YXIgdGhyZWFkID0gZnVsbFRocmVhZExpc3Quc2hpZnQoKTtcbiAgICAgICAgIHZtLnRocmVhZExpc3QucHVzaCggdGhyZWFkICk7XG4gICAgICAgICBjb25zb2xlLmxvZyggJ21vYXIuJyApO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgIGNvbnNvbGUubG9nKCAnbm8gbW9hci4nICk7XG4gICAgICB9XG4gICB9LCAxMDAwICk7XG5cbiAgIGdsb2JhbC5NT1JFID0gZnVuY3Rpb24gKCkge1xuICAgICAgdm0uYWRkTW9yZSgpO1xuICAgICAgJHNjb3BlLiRhcHBseSgpO1xuICAgfTtcblxuICAgJGh0dHAuZ2V0KCBFTkRQT0lOVF9VUkkgKyAndGhyZWFkJyApXG4gICAgICAuc3VjY2VzcyggZnVuY3Rpb24oIGZ1bGxUaHJlYWRMaXN0XyApIHtcbiAgICAgICAgIGNvbnNvbGUubG9nKCBmdWxsVGhyZWFkTGlzdF8ubGVuZ3RoICk7XG4gICAgICAgICBjb25zb2xlLmxvZyggZnVsbFRocmVhZExpc3RfICk7XG4gICAgICAgICBmdWxsVGhyZWFkTGlzdCA9IGZ1bGxUaHJlYWRMaXN0XztcbiAgICAgICAgIHZtLmFkZE1vcmUoKTtcbiAgICAgIH0gKVxuICAgICAgLmVycm9yKCBmdW5jdGlvbiggZXJyICkge1xuICAgICAgICAgY29uc29sZS53YXJuKCBlcnIgKTtcbiAgICAgIH0gKTtcblxuICAgZnVuY3Rpb24gdGhyb3R0bGUoIGZuLCB0aHJlc2hob2xkLCBzY29wZSApIHtcbiAgIFx0aWYgKCAhdGhyZXNoaG9sZCApIHRocmVzaGhvbGQgPSAyNTA7XG4gICBcdHZhciBsYXN0LFxuICAgXHRcdGRlZmVyVGltZXI7XG4gICBcdHJldHVybiBmdW5jdGlvbiAoKSB7XG4gICBcdFx0dmFyIGNvbnRleHQgPSBzY29wZSB8fCB0aGlzO1xuXG4gICBcdFx0dmFyIG5vdyA9ICtuZXcgRGF0ZSxcbiAgIFx0XHRcdGFyZ3MgPSBhcmd1bWVudHM7XG4gICBcdFx0aWYgKCBsYXN0ICYmIG5vdyA8IGxhc3QgKyB0aHJlc2hob2xkICkge1xuICAgXHRcdFx0Y2xlYXJUaW1lb3V0KCBkZWZlclRpbWVyICk7XG4gICBcdFx0XHRkZWZlclRpbWVyID0gc2V0VGltZW91dCggZnVuY3Rpb24gKCkge1xuICAgXHRcdFx0XHRsYXN0ID0gbm93O1xuICAgXHRcdFx0XHRmbi5hcHBseSggY29udGV4dCwgYXJncyApO1xuICAgXHRcdFx0fSwgdGhyZXNoaG9sZCApO1xuICAgXHRcdH0gZWxzZSB7XG4gICBcdFx0XHRsYXN0ID0gbm93O1xuICAgXHRcdFx0Zm4uYXBwbHkoIGNvbnRleHQsIGFyZ3MgKTtcbiAgIFx0XHR9XG4gICBcdH07XG4gICB9XG5cbn0gXSApXG4uZGlyZWN0aXZlKCAnaW1nUG9zdCcsIFsgJyRodHRwJywgJ0VORFBPSU5UX1VSSScsIGZ1bmN0aW9uICggJGh0dHAsIEVORFBPSU5UX1VSSSApIHtcblxuICAgZnVuY3Rpb24gbGluayggJHNjb3BlLCAkZWxlbSApIHtcblxuICAgICAgJGh0dHAucG9zdCggRU5EUE9JTlRfVVJJICsgJ3Bvc3QnLCB7IHRocmVhZDogJHNjb3BlLnRocmVhZCB9IClcbiAgICAgICAgIC5zdWNjZXNzKCBmdW5jdGlvbiggZGF0YSApIHtcbiAgICAgICAgICAgIGNvbnNvbGUubG9nKCBkYXRhICk7XG4gICAgICAgICAgICAkc2NvcGUuaW1nVXJsTGlzdCA9IGRhdGEuaW1nVXJsTGlzdDtcbiAgICAgICAgIH0gKVxuICAgICAgICAgLmVycm9yKCBmdW5jdGlvbiggZXJyICkge1xuICAgICAgICAgICAgY29uc29sZS53YXJuKCBlcnIgKTtcbiAgICAgICAgIH0gKTtcblxuICAgfVxuXG4gICByZXR1cm4ge1xuXG4gICAgICByZXN0cmljdDogJ0UnLFxuICAgICAgcmVwbGFjZTogdHJ1ZSxcbiAgICAgIHNjb3BlOiB0cnVlLFxuICAgICAgbGluazogbGluayxcbiAgICAgIHRlbXBsYXRlOiAnPGRpdj48aW1nIG5nLXJlcGVhdD1cInVybCBpbiBpbWdVcmxMaXN0XCIgbmctc3JjPVwie3t1cmx9fVwiIHdpZHRoPVwiMjUwcHhcIj48YnI+PGEgaHJlZj1cInt7dGhyZWFkfX1cIj57e3RocmVhZH19PC9hPjxicj48YnI+PC9kaXY+J1xuXG4gICB9O1xuXG59IF0gKVxuXG47XG4iXX0=
