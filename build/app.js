(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require=="function"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error("Cannot find module '"+o+"'");throw f.code="MODULE_NOT_FOUND",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require=="function"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){
(function (global){
'use strict';

angular.module('app', ['infinite-scroll']).constant('ENDPOINT_URI', 'http://localhost:8001/api/').controller('MainCtrl', ['$scope', '$http', 'ENDPOINT_URI', function ($scope, $http, ENDPOINT_URI) {

   var vm = this;
   var loadedThreadList = [];
   var currPage = 13;
   var nextPage = false;
   var canAdd = true;
   vm.threadList = [];

   vm.enableAddMore = function () {
      return canAdd = true;
   };
   vm.disableAddMore = function () {
      return canAdd = false;
   };

   vm.addMore = function (force) {

      if (!canAdd && !force) {
         return;
      }

      if (loadedThreadList.length > 0) {

         vm.threadList.push(loadedThreadList.shift());
         console.log('loading thread:', vm.threadList.length);
      } else {

         console.log('end of page.');

         if (nextPage) {
            loadThread();
            nextPage = false;
         }
      }
   };

   global.MORE = function () {
      vm.addMore();
      $scope.$apply();
   };

   function loadThread() {

      console.log('loading page:', currPage);
      $http.get(ENDPOINT_URI + 'thread/' + currPage).success(function (loadedThreadList_) {

         console.log(loadedThreadList_.length);
         console.log(loadedThreadList_);
         loadedThreadList = loadedThreadList_;

         currPage++;
         nextPage = true;

         vm.addMore();
         vm.addMore();
      }).error(function (err) {
         console.warn(err);
      });
   }

   loadThread();
}]).directive('threadList', [function () {

   return {

      restrict: 'E',
      scope: true,
      template: '<thread-item ng-repeat="thread in main.threadList"></thread-item>'

   };
}]).directive('threadItem', ['$http', 'ENDPOINT_URI', function ($http, ENDPOINT_URI) {

   function controller($scope) {

      $scope.main.disableAddMore();

      $scope.loadComplete = false;
      var totalImgs = 0;
      var loaded = 0;

      $scope.itemEnd = function () {
         loaded++;
         if (loaded >= totalImgs) {

            $scope.loadComplete = true;
            $scope.main.enableAddMore();

            $scope.$apply();
            console.log('complete', $scope);
            console.log('----------------------------');
         }
      };

      $http.post(ENDPOINT_URI + 'post', { thread: $scope.thread }).success(function (res) {

         $scope.imgUrlList = res.imgUrlList;
         totalImgs = res.imgUrlList.length;

         console.log('loading', totalImgs, 'imgs');

         if (totalImgs === 0) {
            $scope.loadComplete = true;
            $scope.main.enableAddMore();
            console.log('complete', $scope);
         }
      }).error(function (err) {

         console.warn('threadItem directive POST ERR:', err);
         $scope.loadComplete = true;
         $scope.main.enableAddMore();
      });
   }

   return {

      restrict: 'E',
      replace: true,
      scope: true,
      controller: controller,
      controllerAs: 'tItem',
      template: ['<div>', '<div ng-hide="loadComplete" style="height: 50px; background: #c3c3c3">', 'LOADING...', '</div>', '<div ng-show="loadComplete">', '<thread-img ng-repeat="url in imgUrlList"></thread-img>', '<br>', '<a href="{{thread}}">{{thread}}</a>', '<br><br>', '</div>', '</div>'].join('')
   };
}]).directive('threadImg', [function () {

   function controller($scope, $element) {

      $element.on('load', function () {
         console.log(' img done.');
         $scope.itemEnd();
      }).on('error', function () {
         console.warn('img load err.');
         $scope.itemEnd();
      });
   }

   return {

      restrict: 'E',
      replace: true,
      scope: true,
      controller: controller,
      controllerAs: 'tImg',
      template: '<img ng-src="{{url}}" width="500px">'

   };
}]);

}).call(this,typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})

},{}]},{},[1])
//# sourceMappingURL=data:application/json;charset:utf-8;base64,
